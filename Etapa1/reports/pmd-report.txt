Claves/ClavesServices.java:6:	PackageCase: Package name contains upper case characters
Claves/ClavesServices.java:6:	PackageCase: Package name contains upper case characters
Claves/ClavesServices.java:8:	UnusedImports: Avoid unused imports such as 'java.util.Dictionary'
Claves/ClavesServices.java:8:	UnusedImports: Avoid unused imports such as 'java.util.Dictionary'
Claves/ClavesServices.java:10:	UnusedImports: Avoid unused imports such as 'java.util.Hashtable'
Claves/ClavesServices.java:10:	UnusedImports: Avoid unused imports such as 'java.util.Hashtable'
Claves/ClavesServices.java:28:	CommentRequired: Enum comments are required
Claves/ClavesServices.java:28:	CommentRequired: Enum comments are required
Claves/ClavesServices.java:34:	FieldNamingConventions: The enum constant name 'idClase' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:34:	FieldNamingConventions: The enum constant name 'idClase' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:34:	FieldNamingConventions: The enum constant name 'idMetVar' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:34:	FieldNamingConventions: The enum constant name 'idMetVar' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:40:	FieldNamingConventions: The enum constant name 'charLiteral' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:40:	FieldNamingConventions: The enum constant name 'charLiteral' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:40:	FieldNamingConventions: The enum constant name 'stringLiteral' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:40:	FieldNamingConventions: The enum constant name 'stringLiteral' doesn't match '[A-Z][A-Z_0-9]*'
Claves/ClavesServices.java:51:	CommentSize: Comment is too large: Line too long
Claves/ClavesServices.java:51:	CommentSize: Comment is too large: Line too long
Claves/ClavesServices.java:53:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Claves/ClavesServices.java:53:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Claves/ClavesServices.java:53:	CommentRequired: Field comments are required
Claves/ClavesServices.java:53:	CommentRequired: Field comments are required
Claves/ClavesServices.java:53:	ImmutableField: Private field 'claves' could be made final; it is only initialized in the declaration or constructor.
Claves/ClavesServices.java:53:	ImmutableField: Private field 'claves' could be made final; it is only initialized in the declaration or constructor.
Claves/ClavesServices.java:54:	AvoidFieldNameMatchingMethodName: Field mapeoEstados has the same name as a method
Claves/ClavesServices.java:54:	AvoidFieldNameMatchingMethodName: Field mapeoEstados has the same name as a method
Claves/ClavesServices.java:54:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Claves/ClavesServices.java:54:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Claves/ClavesServices.java:54:	CommentRequired: Field comments are required
Claves/ClavesServices.java:54:	CommentRequired: Field comments are required
Claves/ClavesServices.java:54:	ImmutableField: Private field 'mapeoEstados' could be made final; it is only initialized in the declaration or constructor.
Claves/ClavesServices.java:54:	ImmutableField: Private field 'mapeoEstados' could be made final; it is only initialized in the declaration or constructor.
Claves/ClavesServices.java:58:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:58:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:63:	UseDiamondOperator: Explicit type arguments can be replaced by Diamond Operator
Claves/ClavesServices.java:63:	UseDiamondOperator: Explicit type arguments can be replaced by Diamond Operator
Claves/ClavesServices.java:65:	CommentSize: Comment is too large: Line too long
Claves/ClavesServices.java:65:	CommentSize: Comment is too large: Line too long
Claves/ClavesServices.java:87:	UseDiamondOperator: Explicit type arguments can be replaced by Diamond Operator
Claves/ClavesServices.java:87:	UseDiamondOperator: Explicit type arguments can be replaced by Diamond Operator
Claves/ClavesServices.java:90:	ShortVariable: Avoid variables with short names like i
Claves/ClavesServices.java:90:	ShortVariable: Avoid variables with short names like i
Claves/ClavesServices.java:96:	AvoidDuplicateLiterals: The String literal "blanco" appears 4 times in this file; the first occurrence is on line 96
Claves/ClavesServices.java:96:	AvoidDuplicateLiterals: The String literal "blanco" appears 4 times in this file; the first occurrence is on line 96
Claves/ClavesServices.java:126:	ShortVariable: Avoid variables with short names like c
Claves/ClavesServices.java:126:	ShortVariable: Avoid variables with short names like c
Claves/ClavesServices.java:150:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:150:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:150:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
Claves/ClavesServices.java:150:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
Claves/ClavesServices.java:152:	LocalVariableCouldBeFinal: Local variable 'toR' could be declared final
Claves/ClavesServices.java:152:	LocalVariableCouldBeFinal: Local variable 'toR' could be declared final
Claves/ClavesServices.java:153:	UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'toR'
Claves/ClavesServices.java:153:	UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'toR'
Claves/ClavesServices.java:158:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:158:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:158:	MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final
Claves/ClavesServices.java:158:	MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final
Claves/ClavesServices.java:158:	ShortVariable: Avoid variables with short names like c
Claves/ClavesServices.java:158:	ShortVariable: Avoid variables with short names like c
Claves/ClavesServices.java:166:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:166:	CommentRequired: Public method and constructor comments are required
Claves/ClavesServices.java:166:	MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final
Claves/ClavesServices.java:166:	MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final
Claves/ClavesServices.java:166:	ShortVariable: Avoid variables with short names like c
Claves/ClavesServices.java:166:	ShortVariable: Avoid variables with short names like c
Claves/ClavesServices.java:167:	CommentSize: Comment is too large: Line too long
Claves/ClavesServices.java:167:	CommentSize: Comment is too large: Line too long
Claves/ClavesServices.java:170:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Claves/ClavesServices.java:170:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Claves/ClavesServices.java:171:	ControlStatementBraces: This statement should have braces
Claves/ClavesServices.java:171:	ControlStatementBraces: This statement should have braces
Claves/ClavesServices.java:171:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:171:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:173:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:173:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:174:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:174:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:175:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:175:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:176:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:176:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:177:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:177:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:178:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:178:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:179:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/ClavesServices.java:179:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
Claves/notFoundClaveException.java:6:	PackageCase: Package name contains upper case characters
Claves/notFoundClaveException.java:6:	PackageCase: Package name contains upper case characters
Claves/notFoundClaveException.java:12:	ClassNamingConventions: The class name 'notFoundClaveException' doesn't match '[A-Z][a-zA-Z0-9]*'
Claves/notFoundClaveException.java:12:	ClassNamingConventions: The class name 'notFoundClaveException' doesn't match '[A-Z][a-zA-Z0-9]*'
Claves/notFoundClaveException.java:12:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
Claves/notFoundClaveException.java:12:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
Claves/notFoundClaveException.java:13:	CommentRequired: Public method and constructor comments are required
Claves/notFoundClaveException.java:13:	CommentRequired: Public method and constructor comments are required
Claves/notFoundClaveException.java:13:	MethodArgumentCouldBeFinal: Parameter 'msg' is not assigned and could be declared final
Claves/notFoundClaveException.java:13:	MethodArgumentCouldBeFinal: Parameter 'msg' is not assigned and could be declared final
Claves/notFoundClaveException.java:16:	CallSuperInConstructor: It is a good practice to call super() in a constructor
Claves/notFoundClaveException.java:16:	CallSuperInConstructor: It is a good practice to call super() in a constructor
Claves/notFoundClaveException.java:16:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the notFoundClaveException constructor if you want a default access modifier
Claves/notFoundClaveException.java:16:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the notFoundClaveException constructor if you want a default access modifier
MiniJavaCompiler.java:1:	UnusedImports: Avoid unused imports such as 'lexico.Alexico'
MiniJavaCompiler.java:1:	UnusedImports: Avoid unused imports such as 'lexico.Alexico'
MiniJavaCompiler.java:3:	UnusedImports: Avoid unused imports such as 'buffer.Buffer'
MiniJavaCompiler.java:3:	UnusedImports: Avoid unused imports such as 'buffer.Buffer'
MiniJavaCompiler.java:4:	UnusedImports: Avoid unused imports such as 'Claves.ClavesServices'
MiniJavaCompiler.java:4:	UnusedImports: Avoid unused imports such as 'Claves.ClavesServices'
MiniJavaCompiler.java:9:	UnusedImports: Avoid unused imports such as 'java.util.logging.Level'
MiniJavaCompiler.java:9:	UnusedImports: Avoid unused imports such as 'java.util.logging.Level'
MiniJavaCompiler.java:10:	UnusedImports: Avoid unused imports such as 'java.util.logging.Logger'
MiniJavaCompiler.java:10:	UnusedImports: Avoid unused imports such as 'java.util.logging.Logger'
MiniJavaCompiler.java:11:	UnusedImports: Avoid unused imports such as 'token.Token'
MiniJavaCompiler.java:11:	UnusedImports: Avoid unused imports such as 'token.Token'
MiniJavaCompiler.java:17:	ModifiedCyclomaticComplexity: The class 'MiniJavaCompiler' has a Modified Cyclomatic Complexity of 11 (Highest = 10).
MiniJavaCompiler.java:17:	ModifiedCyclomaticComplexity: The class 'MiniJavaCompiler' has a Modified Cyclomatic Complexity of 11 (Highest = 10).
MiniJavaCompiler.java:17:	NoPackage: All classes, interfaces, enums and annotations must belong to a named package
MiniJavaCompiler.java:17:	NoPackage: All classes, interfaces, enums and annotations must belong to a named package
MiniJavaCompiler.java:17:	StdCyclomaticComplexity: The class 'MiniJavaCompiler' has a Standard Cyclomatic Complexity of 11 (Highest = 10).
MiniJavaCompiler.java:17:	StdCyclomaticComplexity: The class 'MiniJavaCompiler' has a Standard Cyclomatic Complexity of 11 (Highest = 10).
MiniJavaCompiler.java:17:	UseUtilityClass: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.
MiniJavaCompiler.java:17:	UseUtilityClass: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.
MiniJavaCompiler.java:22:	CyclomaticComplexity: The method 'main(String)' has a cyclomatic complexity of 11.
MiniJavaCompiler.java:22:	CyclomaticComplexity: The method 'main(String)' has a cyclomatic complexity of 11.
MiniJavaCompiler.java:22:	MethodArgumentCouldBeFinal: Parameter 'args' is not assigned and could be declared final
MiniJavaCompiler.java:22:	MethodArgumentCouldBeFinal: Parameter 'args' is not assigned and could be declared final
MiniJavaCompiler.java:22:	ModifiedCyclomaticComplexity: The method 'main' has a Modified Cyclomatic Complexity of 10.
MiniJavaCompiler.java:22:	ModifiedCyclomaticComplexity: The method 'main' has a Modified Cyclomatic Complexity of 10.
MiniJavaCompiler.java:22:	StdCyclomaticComplexity: The method 'main' has a Standard Cyclomatic Complexity of 10.
MiniJavaCompiler.java:22:	StdCyclomaticComplexity: The method 'main' has a Standard Cyclomatic Complexity of 10.
MiniJavaCompiler.java:23:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:23:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:23:	UselessParentheses: Useless parentheses.
MiniJavaCompiler.java:23:	UselessParentheses: Useless parentheses.
MiniJavaCompiler.java:24:	DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'file' (lines '24'-'28').
MiniJavaCompiler.java:24:	DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'file' (lines '24'-'28').
MiniJavaCompiler.java:25:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'fileOut' (lines '25'-'80').
MiniJavaCompiler.java:25:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'fileOut' (lines '25'-'80').
MiniJavaCompiler.java:25:	LocalVariableCouldBeFinal: Local variable 'fileOut' could be declared final
MiniJavaCompiler.java:25:	LocalVariableCouldBeFinal: Local variable 'fileOut' could be declared final
MiniJavaCompiler.java:26:	CloseResource: Ensure that resources like this PrintWriter object are closed after use
MiniJavaCompiler.java:26:	CloseResource: Ensure that resources like this PrintWriter object are closed after use
MiniJavaCompiler.java:26:	DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'writer' (lines '26'-'54').
MiniJavaCompiler.java:26:	DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'writer' (lines '26'-'54').
MiniJavaCompiler.java:26:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'writer' (lines '26'-'80').
MiniJavaCompiler.java:26:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'writer' (lines '26'-'80').
MiniJavaCompiler.java:27:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
MiniJavaCompiler.java:27:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
MiniJavaCompiler.java:27:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:27:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:28:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:28:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:35:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:35:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:35:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
MiniJavaCompiler.java:35:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
MiniJavaCompiler.java:35:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:35:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:37:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:37:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:38:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:38:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:39:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:39:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:39:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:39:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:42:	CommentSize: Comment is too large: Too many lines
MiniJavaCompiler.java:42:	CommentSize: Comment is too large: Too many lines
MiniJavaCompiler.java:53:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:53:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:54:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:54:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:54:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'writer' (lines '54'-'80').
MiniJavaCompiler.java:54:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'writer' (lines '54'-'80').
MiniJavaCompiler.java:56:	LocalVariableCouldBeFinal: Local variable 'nuevo' could be declared final
MiniJavaCompiler.java:56:	LocalVariableCouldBeFinal: Local variable 'nuevo' could be declared final
MiniJavaCompiler.java:59:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:59:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
MiniJavaCompiler.java:60:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:60:	ControlStatementBraces: This statement should have braces
MiniJavaCompiler.java:64:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:64:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:66:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:66:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:71:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:71:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:73:	IdenticalCatchBranches: 'catch' branch identical to 'TokenException' branch
MiniJavaCompiler.java:73:	IdenticalCatchBranches: 'catch' branch identical to 'TokenException' branch
MiniJavaCompiler.java:74:	SystemPrintln: System.out.println is used
MiniJavaCompiler.java:74:	SystemPrintln: System.out.println is used
Sintaxis/Asintactico.java:6:	PackageCase: Package name contains upper case characters
Sintaxis/Asintactico.java:6:	PackageCase: Package name contains upper case characters
Sintaxis/Asintactico.java:17:	CyclomaticComplexity: The class 'Asintactico' has a total cyclomatic complexity of 225 (highest 15).
Sintaxis/Asintactico.java:17:	CyclomaticComplexity: The class 'Asintactico' has a total cyclomatic complexity of 225 (highest 15).
Sintaxis/Asintactico.java:17:	ModifiedCyclomaticComplexity: The class 'Asintactico' has a Modified Cyclomatic Complexity of 3 (Highest = 11).
Sintaxis/Asintactico.java:17:	ModifiedCyclomaticComplexity: The class 'Asintactico' has a Modified Cyclomatic Complexity of 3 (Highest = 11).
Sintaxis/Asintactico.java:17:	StdCyclomaticComplexity: The class 'Asintactico' has a Standard Cyclomatic Complexity of 3 (Highest = 11).
Sintaxis/Asintactico.java:17:	StdCyclomaticComplexity: The class 'Asintactico' has a Standard Cyclomatic Complexity of 3 (Highest = 11).
Sintaxis/Asintactico.java:17:	TooManyMethods: This class has too many methods, consider refactoring it.
Sintaxis/Asintactico.java:17:	TooManyMethods: This class has too many methods, consider refactoring it.
Sintaxis/Asintactico.java:20:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Sintaxis/Asintactico.java:20:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Sintaxis/Asintactico.java:20:	CommentRequired: Field comments are required
Sintaxis/Asintactico.java:20:	CommentRequired: Field comments are required
Sintaxis/Asintactico.java:21:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Sintaxis/Asintactico.java:21:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
Sintaxis/Asintactico.java:21:	CommentRequired: Field comments are required
Sintaxis/Asintactico.java:21:	CommentRequired: Field comments are required
Sintaxis/Asintactico.java:21:	ImmutableField: Private field 'alexico' could be made final; it is only initialized in the declaration or constructor.
Sintaxis/Asintactico.java:21:	ImmutableField: Private field 'alexico' could be made final; it is only initialized in the declaration or constructor.
Sintaxis/Asintactico.java:23:	CommentRequired: Public method and constructor comments are required
Sintaxis/Asintactico.java:23:	CommentRequired: Public method and constructor comments are required
Sintaxis/Asintactico.java:23:	MethodArgumentCouldBeFinal: Parameter 'file' is not assigned and could be declared final
Sintaxis/Asintactico.java:23:	MethodArgumentCouldBeFinal: Parameter 'file' is not assigned and could be declared final
Sintaxis/Asintactico.java:27:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
Sintaxis/Asintactico.java:27:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
Sintaxis/Asintactico.java:35:	CommentRequired: Public method and constructor comments are required
Sintaxis/Asintactico.java:35:	CommentRequired: Public method and constructor comments are required
Sintaxis/Asintactico.java:39:	SystemPrintln: System.out.println is used
Sintaxis/Asintactico.java:39:	SystemPrintln: System.out.println is used
Sintaxis/Asintactico.java:45:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:45:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:45:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:45:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:46:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:46:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:52:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:52:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:59:	CyclomaticComplexity: The method 'clase()' has a cyclomatic complexity of 10.
Sintaxis/Asintactico.java:59:	CyclomaticComplexity: The method 'clase()' has a cyclomatic complexity of 10.
Sintaxis/Asintactico.java:61:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:61:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:61:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:61:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:62:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:62:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:64:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:64:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:64:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:64:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:65:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:65:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:67:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:67:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:67:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:67:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:68:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:68:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:70:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:70:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:70:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:70:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:71:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:71:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:72:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:72:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:72:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:72:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:73:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:73:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:87:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:87:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:88:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:88:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:88:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:88:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:88:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:88:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:89:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:89:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:99:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:99:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:110:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:110:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:111:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:111:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:112:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:112:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:113:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:113:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:113:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:113:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:115:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:115:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:116:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:116:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:116:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:116:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:117:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:117:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:118:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:118:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:119:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:119:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:119:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:119:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:121:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:121:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:121:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:121:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:132:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:132:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:132:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:132:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:133:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:133:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:139:	CommentSize: Comment is too large: Line too long
Sintaxis/Asintactico.java:139:	CommentSize: Comment is too large: Line too long
Sintaxis/Asintactico.java:144:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:144:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:144:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:144:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:145:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:145:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:154:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:154:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:154:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:154:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:155:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:155:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:164:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:164:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:164:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:164:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:165:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:165:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:165:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:165:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:165:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:165:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:166:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:166:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:172:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:172:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:172:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:172:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:173:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:173:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:180:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:180:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:181:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:181:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:182:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:182:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:182:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:182:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:183:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:183:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:184:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:184:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:184:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:184:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:185:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:185:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:186:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:186:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:186:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:186:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:187:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:187:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:188:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:188:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:195:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:195:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:195:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:195:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:196:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:196:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:205:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:205:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:205:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:205:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:206:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:206:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:212:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:212:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:212:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:212:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:213:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:213:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:213:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:213:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:213:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:213:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:214:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:214:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:222:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:222:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:222:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:222:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:223:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:223:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:230:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:230:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:230:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:230:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:231:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:231:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:235:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:235:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:235:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:235:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:236:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:236:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:246:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:246:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:246:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:246:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:247:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:247:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:261:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:261:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:261:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:261:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:262:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:262:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:268:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:268:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:268:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:268:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:269:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:269:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:274:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:274:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:274:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:274:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:275:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:275:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:277:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:277:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:277:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:277:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:278:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:278:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:283:	CyclomaticComplexity: The method 'sentencia()' has a cyclomatic complexity of 15.
Sintaxis/Asintactico.java:283:	CyclomaticComplexity: The method 'sentencia()' has a cyclomatic complexity of 15.
Sintaxis/Asintactico.java:283:	ModifiedCyclomaticComplexity: The method 'sentencia' has a Modified Cyclomatic Complexity of 11.
Sintaxis/Asintactico.java:283:	ModifiedCyclomaticComplexity: The method 'sentencia' has a Modified Cyclomatic Complexity of 11.
Sintaxis/Asintactico.java:283:	StdCyclomaticComplexity: The method 'sentencia' has a Standard Cyclomatic Complexity of 11.
Sintaxis/Asintactico.java:283:	StdCyclomaticComplexity: The method 'sentencia' has a Standard Cyclomatic Complexity of 11.
Sintaxis/Asintactico.java:285:	ConfusingTernary: Avoid if (x != y) ..; else ..;
Sintaxis/Asintactico.java:285:	ConfusingTernary: Avoid if (x != y) ..; else ..;
Sintaxis/Asintactico.java:285:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:285:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:286:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:286:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:288:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:288:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:288:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:288:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:289:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:289:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:298:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:298:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:298:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:298:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:299:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:299:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:303:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:303:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:308:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:308:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:309:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:309:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:309:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:309:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:311:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:311:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:312:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:312:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:312:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:312:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:315:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:315:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:319:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:319:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:319:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:319:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:320:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:320:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:324:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:324:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:324:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:324:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:342:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:342:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:342:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:342:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:343:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:343:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:344:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:344:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:345:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:345:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:352:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:352:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:352:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:352:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:353:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:353:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:361:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:361:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:361:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:361:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:362:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:362:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:376:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:376:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:385:	CyclomaticComplexity: The method 'operadorBinario()' has a cyclomatic complexity of 15.
Sintaxis/Asintactico.java:385:	CyclomaticComplexity: The method 'operadorBinario()' has a cyclomatic complexity of 15.
Sintaxis/Asintactico.java:386:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:386:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:386:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:386:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:387:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:387:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:388:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:388:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:389:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:389:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:390:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:390:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:391:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:391:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:392:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:392:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:393:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:393:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:394:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:394:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:395:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:395:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:396:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:396:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:397:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:397:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:398:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:398:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:402:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:402:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:408:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:408:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:409:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:409:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:417:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:417:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:417:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:417:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:418:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:418:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:418:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:418:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:418:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:418:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:419:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:419:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:419:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:419:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:419:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:419:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:420:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:420:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:435:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:435:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:436:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:436:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:436:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:436:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:437:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:437:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:437:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:437:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:438:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:438:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:438:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:438:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:439:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:439:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:439:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:439:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:440:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:440:	CollapsibleIfStatements: These nested if statements could be combined
Sintaxis/Asintactico.java:440:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:440:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:440:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:440:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:441:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:441:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:469:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:469:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:471:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:471:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:471:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:471:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:472:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:472:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:476:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:476:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:477:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:477:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:477:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:477:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:478:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:478:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:479:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:479:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:479:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:479:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:480:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:480:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:481:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:481:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:481:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:481:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:482:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:482:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:483:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:483:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:483:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:483:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:484:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:484:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:484:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:484:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:493:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:493:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:493:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:493:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:494:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:494:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:495:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:495:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:495:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:495:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:496:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:496:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:503:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:503:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:503:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:503:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:504:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:504:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:511:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:511:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:511:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:511:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:512:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:512:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:515:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:515:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:515:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:515:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:516:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:516:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:527:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:527:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:527:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:527:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:528:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:528:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:529:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:529:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:529:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:529:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:530:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:530:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:543:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:543:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:553:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:553:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:554:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:554:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:554:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:554:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:555:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:555:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:557:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:557:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:557:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:557:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:558:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:558:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:562:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:562:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:562:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:562:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:568:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:568:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:568:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:568:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:569:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:569:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:576:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:576:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:577:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:577:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:579:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:579:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:580:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:580:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:580:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:580:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:581:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:581:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:581:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:581:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:583:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:583:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:583:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:583:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:586:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:586:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:586:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:586:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
Sintaxis/Asintactico.java:598:	UnusedPrivateMethod: Avoid unused private methods such as 'encadenadoAux()'.
Sintaxis/Asintactico.java:598:	UnusedPrivateMethod: Avoid unused private methods such as 'encadenadoAux()'.
Sintaxis/Asintactico.java:600:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:600:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:600:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:600:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:601:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:601:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:617:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:617:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:626:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:626:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:626:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:626:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:627:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:627:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:628:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:628:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:628:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:628:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:629:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:629:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:630:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:630:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:630:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:630:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:631:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:631:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:635:	UnusedPrivateMethod: Avoid unused private methods such as 'llamadaOIDEncadenado()'.
Sintaxis/Asintactico.java:635:	UnusedPrivateMethod: Avoid unused private methods such as 'llamadaOIDEncadenado()'.
Sintaxis/Asintactico.java:636:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:636:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:636:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:636:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:637:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:637:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:639:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:639:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:639:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:639:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:640:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:640:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:648:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:648:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:648:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:648:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:649:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:649:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:656:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:656:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:656:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:656:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:657:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:657:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:665:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:665:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:665:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:665:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:666:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:666:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:669:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:669:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:669:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:669:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:670:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:670:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:671:	AddEmptyString: Do not add empty strings
Sintaxis/Asintactico.java:671:	AddEmptyString: Do not add empty strings
Sintaxis/Asintactico.java:679:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:679:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:679:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:679:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:680:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:680:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:688:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:688:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:696:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:696:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:696:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:696:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:697:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:697:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:707:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:707:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:707:	UselessParentheses: Useless parentheses.
Sintaxis/Asintactico.java:707:	UselessParentheses: Useless parentheses.
Sintaxis/Asintactico.java:708:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:708:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:709:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:709:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:710:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:710:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:711:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:711:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:712:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:712:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:725:	EmptyCatchBlock: Avoid empty catch blocks
Sintaxis/Asintactico.java:725:	EmptyCatchBlock: Avoid empty catch blocks
Sintaxis/Asintactico.java:735:	MethodArgumentCouldBeFinal: Parameter 'aux' is not assigned and could be declared final
Sintaxis/Asintactico.java:735:	MethodArgumentCouldBeFinal: Parameter 'aux' is not assigned and could be declared final
Sintaxis/Asintactico.java:736:	LocalVariableCouldBeFinal: Local variable 'toR' could be declared final
Sintaxis/Asintactico.java:736:	LocalVariableCouldBeFinal: Local variable 'toR' could be declared final
Sintaxis/Asintactico.java:736:	UselessParentheses: Useless parentheses.
Sintaxis/Asintactico.java:736:	UselessParentheses: Useless parentheses.
Sintaxis/Asintactico.java:737:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:737:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
Sintaxis/Asintactico.java:739:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:739:	ControlStatementBraces: This statement should have braces
Sintaxis/Asintactico.java:745:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
Sintaxis/Asintactico.java:745:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
Sintaxis/Asintactico.java:746:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:746:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:746:	UselessParentheses: Useless parentheses.
Sintaxis/Asintactico.java:746:	UselessParentheses: Useless parentheses.
Sintaxis/Asintactico.java:747:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:747:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:748:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:748:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:754:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:754:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:755:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:755:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:756:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/Asintactico.java:756:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
Sintaxis/AsintacticoException.java:6:	PackageCase: Package name contains upper case characters
Sintaxis/AsintacticoException.java:6:	PackageCase: Package name contains upper case characters
Sintaxis/AsintacticoException.java:12:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
Sintaxis/AsintacticoException.java:12:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
Sintaxis/AsintacticoException.java:14:	CommentRequired: Public method and constructor comments are required
Sintaxis/AsintacticoException.java:14:	CommentRequired: Public method and constructor comments are required
Sintaxis/AsintacticoException.java:14:	MethodArgumentCouldBeFinal: Parameter 'm' is not assigned and could be declared final
Sintaxis/AsintacticoException.java:14:	MethodArgumentCouldBeFinal: Parameter 'm' is not assigned and could be declared final
Sintaxis/AsintacticoException.java:14:	ShortVariable: Avoid variables with short names like m
Sintaxis/AsintacticoException.java:14:	ShortVariable: Avoid variables with short names like m
buffer/Buffer.java:17:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:17:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:17:	CommentRequired: Field comments are required
buffer/Buffer.java:17:	CommentRequired: Field comments are required
buffer/Buffer.java:17:	ImmutableField: Private field 'fileName' could be made final; it is only initialized in the declaration or constructor.
buffer/Buffer.java:17:	ImmutableField: Private field 'fileName' could be made final; it is only initialized in the declaration or constructor.
buffer/Buffer.java:18:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:18:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:18:	CommentRequired: Field comments are required
buffer/Buffer.java:18:	CommentRequired: Field comments are required
buffer/Buffer.java:19:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:19:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:19:	CommentRequired: Field comments are required
buffer/Buffer.java:19:	CommentRequired: Field comments are required
buffer/Buffer.java:20:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:20:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:20:	CommentRequired: Field comments are required
buffer/Buffer.java:20:	CommentRequired: Field comments are required
buffer/Buffer.java:20:	ShortVariable: Avoid variables with short names like i
buffer/Buffer.java:20:	ShortVariable: Avoid variables with short names like i
buffer/Buffer.java:21:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:21:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:21:	CommentRequired: Field comments are required
buffer/Buffer.java:21:	CommentRequired: Field comments are required
buffer/Buffer.java:21:	ImmutableField: Private field 'bufferedReader' could be made final; it is only initialized in the declaration or constructor.
buffer/Buffer.java:21:	ImmutableField: Private field 'bufferedReader' could be made final; it is only initialized in the declaration or constructor.
buffer/Buffer.java:22:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:22:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:22:	CommentRequired: Field comments are required
buffer/Buffer.java:22:	CommentRequired: Field comments are required
buffer/Buffer.java:22:	ImmutableField: Private field 'fileReader' could be made final; it is only initialized in the declaration or constructor.
buffer/Buffer.java:22:	ImmutableField: Private field 'fileReader' could be made final; it is only initialized in the declaration or constructor.
buffer/Buffer.java:22:	SingularField: Perhaps 'fileReader' could be replaced by a local variable.
buffer/Buffer.java:22:	SingularField: Perhaps 'fileReader' could be replaced by a local variable.
buffer/Buffer.java:23:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:23:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
buffer/Buffer.java:23:	CommentRequired: Field comments are required
buffer/Buffer.java:23:	CommentRequired: Field comments are required
buffer/Buffer.java:25:	CommentRequired: Public method and constructor comments are required
buffer/Buffer.java:25:	CommentRequired: Public method and constructor comments are required
buffer/Buffer.java:25:	MethodArgumentCouldBeFinal: Parameter 'fileName' is not assigned and could be declared final
buffer/Buffer.java:25:	MethodArgumentCouldBeFinal: Parameter 'fileName' is not assigned and could be declared final
buffer/Buffer.java:31:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
buffer/Buffer.java:31:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
buffer/Buffer.java:35:	ConstructorCallsOverridableMethod: Overridable method 'consumirLinea' called during object construction
buffer/Buffer.java:35:	ConstructorCallsOverridableMethod: Overridable method 'consumirLinea' called during object construction
buffer/Buffer.java:40:	CommentRequired: Public method and constructor comments are required
buffer/Buffer.java:40:	CommentRequired: Public method and constructor comments are required
buffer/Buffer.java:44:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
buffer/Buffer.java:44:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
buffer/Buffer.java:45:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:45:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:48:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:48:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:48:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
buffer/Buffer.java:48:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
buffer/Buffer.java:48:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
buffer/Buffer.java:48:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
buffer/Buffer.java:50:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:50:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:50:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
buffer/Buffer.java:50:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
buffer/Buffer.java:53:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
buffer/Buffer.java:53:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
buffer/Buffer.java:79:	CommentRequired: Public method and constructor comments are required
buffer/Buffer.java:79:	CommentRequired: Public method and constructor comments are required
buffer/Buffer.java:94:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:94:	ControlStatementBraces: This statement should have braces
buffer/Buffer.java:94:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
buffer/Buffer.java:94:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
buffer/Buffer.java:99:	SystemPrintln: System.out.println is used
buffer/Buffer.java:99:	SystemPrintln: System.out.println is used
lexico/Alexico.java:19:	CyclomaticComplexity: The class 'Alexico' has a total cyclomatic complexity of 163 (highest 119).
lexico/Alexico.java:19:	CyclomaticComplexity: The class 'Alexico' has a total cyclomatic complexity of 163 (highest 119).
lexico/Alexico.java:19:	ModifiedCyclomaticComplexity: The class 'Alexico' has a Modified Cyclomatic Complexity of 8 (Highest = 48).
lexico/Alexico.java:19:	ModifiedCyclomaticComplexity: The class 'Alexico' has a Modified Cyclomatic Complexity of 8 (Highest = 48).
lexico/Alexico.java:19:	StdCyclomaticComplexity: The class 'Alexico' has a Standard Cyclomatic Complexity of 14 (Highest = 83).
lexico/Alexico.java:19:	StdCyclomaticComplexity: The class 'Alexico' has a Standard Cyclomatic Complexity of 14 (Highest = 83).
lexico/Alexico.java:20:	CommentRequired: Field comments are required
lexico/Alexico.java:20:	CommentRequired: Field comments are required
lexico/Alexico.java:20:	FieldNamingConventions: The final field name 'EOF' doesn't match '[a-z][a-zA-Z0-9]*'
lexico/Alexico.java:20:	FieldNamingConventions: The final field name 'EOF' doesn't match '[a-z][a-zA-Z0-9]*'
lexico/Alexico.java:21:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:21:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:21:	CommentRequired: Field comments are required
lexico/Alexico.java:21:	CommentRequired: Field comments are required
lexico/Alexico.java:22:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:22:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:22:	CommentRequired: Field comments are required
lexico/Alexico.java:22:	CommentRequired: Field comments are required
lexico/Alexico.java:23:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:23:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:23:	CommentRequired: Field comments are required
lexico/Alexico.java:23:	CommentRequired: Field comments are required
lexico/Alexico.java:24:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:24:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:24:	CommentRequired: Field comments are required
lexico/Alexico.java:24:	CommentRequired: Field comments are required
lexico/Alexico.java:25:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:25:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:25:	CommentRequired: Field comments are required
lexico/Alexico.java:25:	CommentRequired: Field comments are required
lexico/Alexico.java:26:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:26:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:26:	CommentRequired: Field comments are required
lexico/Alexico.java:26:	CommentRequired: Field comments are required
lexico/Alexico.java:27:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:27:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:27:	CommentRequired: Field comments are required
lexico/Alexico.java:27:	CommentRequired: Field comments are required
lexico/Alexico.java:28:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:28:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
lexico/Alexico.java:28:	CommentRequired: Field comments are required
lexico/Alexico.java:28:	CommentRequired: Field comments are required
lexico/Alexico.java:31:	CommentRequired: Public method and constructor comments are required
lexico/Alexico.java:31:	CommentRequired: Public method and constructor comments are required
lexico/Alexico.java:31:	MethodArgumentCouldBeFinal: Parameter 'fileName' is not assigned and could be declared final
lexico/Alexico.java:31:	MethodArgumentCouldBeFinal: Parameter 'fileName' is not assigned and could be declared final
lexico/Alexico.java:35:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
lexico/Alexico.java:35:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
lexico/Alexico.java:43:	PreserveStackTrace: New exception is thrown in catch block, original stack trace may be lost
lexico/Alexico.java:43:	PreserveStackTrace: New exception is thrown in catch block, original stack trace may be lost
lexico/Alexico.java:49:	CommentRequired: Public method and constructor comments are required
lexico/Alexico.java:49:	CommentRequired: Public method and constructor comments are required
lexico/Alexico.java:49:	CyclomaticComplexity: The method 'nextToken()' has a cyclomatic complexity of 119.
lexico/Alexico.java:49:	CyclomaticComplexity: The method 'nextToken()' has a cyclomatic complexity of 119.
lexico/Alexico.java:49:	ExcessiveMethodLength: Avoid really long methods.
lexico/Alexico.java:49:	ExcessiveMethodLength: Avoid really long methods.
lexico/Alexico.java:49:	ModifiedCyclomaticComplexity: The method 'nextToken' has a Modified Cyclomatic Complexity of 48.
lexico/Alexico.java:49:	ModifiedCyclomaticComplexity: The method 'nextToken' has a Modified Cyclomatic Complexity of 48.
lexico/Alexico.java:49:	NPathComplexity: The method 'nextToken()' has an NPath complexity of 1440, current threshold is 200
lexico/Alexico.java:49:	NPathComplexity: The method 'nextToken()' has an NPath complexity of 1440, current threshold is 200
lexico/Alexico.java:49:	NcssCount: The method 'nextToken()' has a NCSS line count of 331.
lexico/Alexico.java:49:	NcssCount: The method 'nextToken()' has a NCSS line count of 331.
lexico/Alexico.java:49:	NcssMethodCount: The method nextToken() has an NCSS line count of 331
lexico/Alexico.java:49:	NcssMethodCount: The method nextToken() has an NCSS line count of 331
lexico/Alexico.java:49:	StdCyclomaticComplexity: The method 'nextToken' has a Standard Cyclomatic Complexity of 83.
lexico/Alexico.java:49:	StdCyclomaticComplexity: The method 'nextToken' has a Standard Cyclomatic Complexity of 83.
lexico/Alexico.java:51:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:51:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:52:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:52:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:52:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:52:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:55:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:55:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:59:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:59:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:65:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:65:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:66:	AvoidDuplicateLiterals: The String literal " : " appears 9 times in this file; the first occurrence is on line 66
lexico/Alexico.java:66:	AvoidDuplicateLiterals: The String literal " : " appears 9 times in this file; the first occurrence is on line 66
lexico/Alexico.java:66:	AvoidDuplicateLiterals: The String literal "Error léxico en linea : " appears 13 times in this file; the first occurrence is on line 66
lexico/Alexico.java:66:	AvoidDuplicateLiterals: The String literal "Error léxico en linea : " appears 13 times in this file; the first occurrence is on line 66
lexico/Alexico.java:66:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:66:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:69:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:69:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:70:	UselessParentheses: Useless parentheses.
lexico/Alexico.java:70:	UselessParentheses: Useless parentheses.
lexico/Alexico.java:79:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:79:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:84:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:84:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:85:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:85:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:104:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:104:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:104:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:104:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:105:	AddEmptyString: Do not add empty strings
lexico/Alexico.java:105:	AddEmptyString: Do not add empty strings
lexico/Alexico.java:105:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:105:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:116:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:116:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:116:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:116:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:121:	SystemPrintln: System.out.println is used
lexico/Alexico.java:121:	SystemPrintln: System.out.println is used
lexico/Alexico.java:122:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:122:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:141:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:141:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:143:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:143:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:143:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:143:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:143:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:143:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:143:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:143:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:149:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:149:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:149:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:149:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:152:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:152:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:152:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:152:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:155:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:155:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:174:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:174:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:174:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:174:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:174:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:174:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:174:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:174:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:180:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:180:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:180:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:180:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:182:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:182:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:182:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:182:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:185:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:185:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:211:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:211:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:212:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:212:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:212:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:212:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:213:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:213:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:214:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:214:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:214:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:214:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:216:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:216:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:216:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:216:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:216:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:216:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:222:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:222:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:237:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:237:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:253:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:253:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:253:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:253:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:254:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:254:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:269:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:269:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:269:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:269:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:270:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:270:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:272:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:272:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:288:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:288:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:289:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'aux' (lines '289'-'613').
lexico/Alexico.java:289:	DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'aux' (lines '289'-'613').
lexico/Alexico.java:289:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:289:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:289:	PrematureDeclaration: Avoid declaring a variable if it is unreferenced before a possible exit point.
lexico/Alexico.java:289:	PrematureDeclaration: Avoid declaring a variable if it is unreferenced before a possible exit point.
lexico/Alexico.java:289:	UnusedLocalVariable: Avoid unused local variables such as 'aux'.
lexico/Alexico.java:289:	UnusedLocalVariable: Avoid unused local variables such as 'aux'.
lexico/Alexico.java:297:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:297:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:298:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:298:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:298:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:298:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:301:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:301:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:302:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:302:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:302:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:302:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:307:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:307:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:311:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:311:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:311:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:311:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:318:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:318:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:319:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:319:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:319:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:319:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:332:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:332:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:332:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:332:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:342:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:342:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:342:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:342:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:345:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:345:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:352:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:352:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:352:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:352:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:363:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:363:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:363:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:363:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:369:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:369:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:369:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:369:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:375:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:375:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:375:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:375:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:381:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:381:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:381:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:381:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:387:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:387:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:387:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:387:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:393:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:393:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:393:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:393:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:400:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:400:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:400:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:400:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:406:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:406:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:406:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:406:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:412:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:412:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:412:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:412:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:420:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:420:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:421:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:421:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:422:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:422:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:422:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:422:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:422:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:422:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:422:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:422:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:425:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:425:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:425:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:425:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:425:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:425:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:425:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:425:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:429:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:429:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:429:	ConfusingTernary: Avoid if (x != y) ..; else ..;
lexico/Alexico.java:429:	ConfusingTernary: Avoid if (x != y) ..; else ..;
lexico/Alexico.java:430:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:430:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:430:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:430:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:432:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:432:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:432:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:432:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:440:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:440:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:441:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:441:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:442:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:442:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:442:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:442:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:442:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:442:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:442:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:442:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:445:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:445:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:445:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:445:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:445:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:445:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:445:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:445:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:449:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:449:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:449:	ConfusingTernary: Avoid if (x != y) ..; else ..;
lexico/Alexico.java:449:	ConfusingTernary: Avoid if (x != y) ..; else ..;
lexico/Alexico.java:450:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:450:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:450:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:450:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:452:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:452:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:452:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:452:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:457:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:457:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:461:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:461:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:462:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:462:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:462:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:462:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:467:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:467:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:467:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:467:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:477:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:477:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:478:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:478:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:479:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:479:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:479:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:479:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:479:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:479:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:479:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:479:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:482:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:482:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:482:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:482:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:482:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:482:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:482:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:482:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:486:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:486:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:486:	ConfusingTernary: Avoid if (x != y) ..; else ..;
lexico/Alexico.java:486:	ConfusingTernary: Avoid if (x != y) ..; else ..;
lexico/Alexico.java:487:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:487:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:487:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:487:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:489:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:489:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:489:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:489:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:496:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:496:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:497:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:497:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:497:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:497:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:497:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:497:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:497:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:497:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:499:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:499:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:511:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:511:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:512:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:512:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:512:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:512:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:512:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:512:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:512:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:512:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:514:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:514:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:528:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:528:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:529:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:529:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:529:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:529:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:534:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:534:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:534:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:534:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:541:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:541:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
lexico/Alexico.java:542:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:542:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:542:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:542:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:547:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:547:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:547:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:547:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:554:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:554:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:554:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:554:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:555:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:555:	CommentSize: Comment is too large: Line too long
lexico/Alexico.java:561:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:561:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:561:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:561:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:567:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:567:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
lexico/Alexico.java:567:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:567:	LawOfDemeter: Potential violation of Law of Demeter (static property access)
lexico/Alexico.java:603:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:603:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:621:	CyclomaticComplexity: The method 'consumirCaracter()' has a cyclomatic complexity of 10.
lexico/Alexico.java:621:	CyclomaticComplexity: The method 'consumirCaracter()' has a cyclomatic complexity of 10.
lexico/Alexico.java:630:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:630:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:634:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:634:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:645:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
lexico/Alexico.java:645:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
lexico/Alexico.java:646:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
lexico/Alexico.java:646:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
lexico/Alexico.java:649:	CyclomaticComplexity: The method 'esPuntuacion(char)' has a cyclomatic complexity of 20.
lexico/Alexico.java:649:	CyclomaticComplexity: The method 'esPuntuacion(char)' has a cyclomatic complexity of 20.
lexico/Alexico.java:649:	MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final
lexico/Alexico.java:649:	MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final
lexico/Alexico.java:649:	ShortVariable: Avoid variables with short names like c
lexico/Alexico.java:649:	ShortVariable: Avoid variables with short names like c
lexico/Alexico.java:649:	StdCyclomaticComplexity: The method 'esPuntuacion' has a Standard Cyclomatic Complexity of 20.
lexico/Alexico.java:649:	StdCyclomaticComplexity: The method 'esPuntuacion' has a Standard Cyclomatic Complexity of 20.
lexico/Alexico.java:651:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:651:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:652:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:652:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:653:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:653:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:654:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:654:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:655:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:655:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:656:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:656:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:657:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:657:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:658:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:658:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:659:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:659:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:661:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:661:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:662:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:662:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:663:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:663:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:664:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:664:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:665:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:665:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:666:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:666:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:667:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:667:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:668:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:668:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:669:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:669:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:670:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:670:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
lexico/Alexico.java:678:	MethodArgumentCouldBeFinal: Parameter 'aux' is not assigned and could be declared final
lexico/Alexico.java:678:	MethodArgumentCouldBeFinal: Parameter 'aux' is not assigned and could be declared final
lexico/Alexico.java:683:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:683:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
lexico/Alexico.java:684:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:684:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:692:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:692:	LocalVariableCouldBeFinal: Local variable 'aux' could be declared final
lexico/Alexico.java:698:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:698:	ControlStatementBraces: This statement should have braces
lexico/Alexico.java:698:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
lexico/Alexico.java:698:	IfElseStmtsMustUseBraces: Avoid using if...else statements without curly braces
token/Token.java:12:	DataClass: The class 'Token' is suspected to be a Data Class (WOC=16.667%, NOPA=0, NOAM=8, WMC=14)
token/Token.java:12:	DataClass: The class 'Token' is suspected to be a Data Class (WOC=16.667%, NOPA=0, NOAM=8, WMC=14)
token/Token.java:14:	CommentRequired: Field comments are required
token/Token.java:14:	CommentRequired: Field comments are required
token/Token.java:15:	CommentRequired: Field comments are required
token/Token.java:15:	CommentRequired: Field comments are required
token/Token.java:16:	CommentRequired: Field comments are required
token/Token.java:16:	CommentRequired: Field comments are required
token/Token.java:17:	CommentRequired: Field comments are required
token/Token.java:17:	CommentRequired: Field comments are required
token/Token.java:30:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
token/Token.java:30:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
token/Token.java:30:	MethodArgumentCouldBeFinal: Parameter 'type' is not assigned and could be declared final
token/Token.java:30:	MethodArgumentCouldBeFinal: Parameter 'type' is not assigned and could be declared final
token/Token.java:35:	CommentRequired: Public method and constructor comments are required
token/Token.java:35:	CommentRequired: Public method and constructor comments are required
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'line' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'line' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'row' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'row' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'type' is not assigned and could be declared final
token/Token.java:35:	MethodArgumentCouldBeFinal: Parameter 'type' is not assigned and could be declared final
token/Token.java:47:	MethodArgumentCouldBeFinal: Parameter 'type' is not assigned and could be declared final
token/Token.java:47:	MethodArgumentCouldBeFinal: Parameter 'type' is not assigned and could be declared final
token/Token.java:55:	MethodArgumentCouldBeFinal: Parameter 'row' is not assigned and could be declared final
token/Token.java:55:	MethodArgumentCouldBeFinal: Parameter 'row' is not assigned and could be declared final
token/Token.java:63:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
token/Token.java:63:	MethodArgumentCouldBeFinal: Parameter 'lexema' is not assigned and could be declared final
token/Token.java:71:	CommentRequired: Public method and constructor comments are required
token/Token.java:71:	CommentRequired: Public method and constructor comments are required
token/Token.java:72:	LocalVariableCouldBeFinal: Local variable 'toR' could be declared final
token/Token.java:72:	LocalVariableCouldBeFinal: Local variable 'toR' could be declared final
token/Token.java:73:	UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'toR'
token/Token.java:73:	UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'toR'
token/Token.java:76:	MethodArgumentCouldBeFinal: Parameter 'line' is not assigned and could be declared final
token/Token.java:76:	MethodArgumentCouldBeFinal: Parameter 'line' is not assigned and could be declared final
token/Token.java:84:	MethodArgumentCouldBeFinal: Parameter 'aux' is not assigned and could be declared final
token/Token.java:84:	MethodArgumentCouldBeFinal: Parameter 'aux' is not assigned and could be declared final
token/Token.java:84:	SuspiciousEqualsMethodName: The method name and parameter number are suspiciously close to equals(Object)
token/Token.java:84:	SuspiciousEqualsMethodName: The method name and parameter number are suspiciously close to equals(Object)
token/Token.java:85:	DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'toR' (lines '85'-'87').
token/Token.java:85:	DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'toR' (lines '85'-'87').
token/Token.java:86:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
token/Token.java:86:	IfStmtsMustUseBraces: Avoid using if statements without curly braces
token/Token.java:87:	ControlStatementBraces: This statement should have braces
token/Token.java:87:	ControlStatementBraces: This statement should have braces
token/TokenException.java:12:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
token/TokenException.java:12:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
token/TokenException.java:15:	CommentRequired: Public method and constructor comments are required
token/TokenException.java:15:	CommentRequired: Public method and constructor comments are required
token/TokenException.java:15:	MethodArgumentCouldBeFinal: Parameter 'msg' is not assigned and could be declared final
token/TokenException.java:15:	MethodArgumentCouldBeFinal: Parameter 'msg' is not assigned and could be declared final
token/TokenException.java:19:	CallSuperInConstructor: It is a good practice to call super() in a constructor
token/TokenException.java:19:	CallSuperInConstructor: It is a good practice to call super() in a constructor
token/TokenException.java:19:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TokenException constructor if you want a default access modifier
token/TokenException.java:19:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TokenException constructor if you want a default access modifier
